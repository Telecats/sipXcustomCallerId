Name: @PACKAGE@
Version: @VERSION@
Release: @PACKAGE_REVISION@

# Change to your information
Summary: sipXecs Custom Caller ID from database
License: LGPL
Group: Telcommunications
Vendor: Telecats B.V.
Packager: Niek Vlessert <niekvlessert@gmail.com>
Url: http://www.telecats.nl/

Requires: sipxcommserverlib >= %version

# sipx c++ server modules
BuildRequires: sipxcommserverlib-devel >= %version

# java modules
%if %{_vendor} == suse
BuildRequires: java-1_6_0-sun-devel
%else
BuildRequires: java-devel >= 1.6
%endif
BuildRequires: automake
BuildRequires: sipxcommons >= %version

# Ruby modules
Requires: rubygems

# xml validation in 'make check'. Remove if you do not use that.
BuildRequires: libxml2

Source: %name-%version.tar.gz

Prefix: %_prefix
BuildRoot: %{_tmppath}/%name-%version-root

%description
Display company name from an incoming call on the display of the
phone. This can be based on several resources. The number from all
incoming calls will be searched in the database and a name will be
added to the CID if a match is there. The plugin can be
disabled/enabled without rebuilding. At night the database table can
be synced from all the sources one needs like LDAP or some other
database system.

%package config
Requires : sipxconfig >= %version

%package devel
Requires : %name

%description devel
This is just sample text for the development portion of your project. Change this
test to describe the development portion of your project in more detail.

%prep
%setup -q

%build
%configure --enable-rpmbuild @SIPX_RPM_CONFIGURE_OPTIONS@
make

%install
rm -rf $RPM_BUILD_ROOT
make DESTDIR=$RPM_BUILD_ROOT install

%clean
rm -rf $RPM_BUILD_ROOT

%files
%defattr(644,root,root,755)
%{_libdir}/libsipxcustomcallerid.so*

%files config
%{_datadir}/java/sipXecs/sipXconfig/plugins/sipxcustomcallerid.jar

%files devel
%{_libdir}/libsipxcustomcallerid.la
